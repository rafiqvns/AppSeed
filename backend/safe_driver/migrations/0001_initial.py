# Generated by Django 2.2.17 on 2021-02-10 20:40

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BTWBacking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Backing',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBackingClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Backing Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBackingClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Backing Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBackingClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Backing Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBackingClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Backing Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBrakesAndStoppings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('hand_valve_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand valve use')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBrakesAndStoppingsClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('hand_valve_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand valve use')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBrakesAndStoppingsClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBrakesAndStoppingsClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWBrakesAndStoppingsClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('hand_valve_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand valve use')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCabSafety',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('can_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Cab Safety',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCabSafetyClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Cab Safety Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCabSafetyClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Cab Safety Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCabSafetyClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Cab Safety Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCabSafetyClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Cab Safety Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Behind The Wheel Class A',
                'verbose_name_plural': 'Behind The Wheel Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Behind The Wheel Class B',
                'verbose_name_plural': 'Behind The Wheel Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Behind The Wheel Class C',
                'verbose_name_plural': 'Behind The Wheel Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Behind The Wheel Class D',
                'verbose_name_plural': 'Behind The Wheel Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClutchAndTransmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start off smoothly')),
                ('proper_gear_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear use')),
                ('shift_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shift smoothly')),
                ('proper_gear_sequence', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear sequence')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Clutch and Transmission',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClutchAndTransmissionClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start off smoothly')),
                ('proper_gear_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear use')),
                ('shifter_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter smoothly')),
                ('proper_gear_sequence', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear sequence')),
                ('does_not_ride', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Ride')),
                ('does_not_coast', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Coast')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Clutch and Transmission Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClutchAndTransmissionClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start off smoothly')),
                ('proper_gear_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear use')),
                ('shifter_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter smoothly')),
                ('proper_gear_sequence', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear sequence')),
                ('does_not_ride', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Ride')),
                ('does_not_coast', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Coast')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Clutch and Transmission Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClutchAndTransmissionClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start off smoothly')),
                ('proper_gear_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear use')),
                ('shifter_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter smoothly')),
                ('proper_gear_sequence', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear sequence')),
                ('does_not_ride', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Ride')),
                ('does_not_coast', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Coast')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Clutch and Transmission Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWClutchAndTransmissionClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start off smoothly')),
                ('proper_gear_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear use')),
                ('shifter_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter smoothly')),
                ('proper_gear_sequence', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear sequence')),
                ('does_not_ride', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Ride')),
                ('does_not_coast', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Does not Coast')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Clutch and Transmission Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCoupling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_for_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check for Hazards')),
                ('backs_under_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs under slowly')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('physical_check_coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Physical check coupling')),
                ('charges_system_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Charges system correctly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Coupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCouplingClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_for_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check for Hazards')),
                ('backs_under_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs under slowly')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('physical_check_coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Physical check coupling')),
                ('charges_system_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Charges system correctly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Coupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWCouplingClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_for_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check for Hazards')),
                ('backs_under_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs under slowly')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('physical_check_coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Physical check coupling')),
                ('charges_system_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Charges system correctly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Coupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEngineOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('does_not_ride', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t Ride')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Engine Operation',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEngineOperationClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Engine Operation Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEngineOperationClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Engine Operation Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEngineOperationClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Engine Operation Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEngineOperationClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Engine Operation Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEyeMovementAndMirror',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Eye movement and mirror use',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEyeMovementAndMirrorClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Eye movement and mirror use Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEyeMovementAndMirrorClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Eye movement and mirror use Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEyeMovementAndMirrorClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Eye movement and mirror use Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWEyeMovementAndMirrorClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Eye movement and mirror use Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWGeneralSafetyAndDOTAdherence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - General Safety and DOT adherence',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWGeneralSafetyAndDOTAdherenceClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - General Safety and DOT adherence - Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWGeneralSafetyAndDOTAdherenceClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - General Safety and DOT adherence - Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWGeneralSafetyAndDOTAdherenceClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - General Safety and DOT adherence - Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWGeneralSafetyAndDOTAdherenceClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - General Safety and DOT adherence - Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWHills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Hills',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWHillsClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Hills Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWHillsClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Hills Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWHillsClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Hills Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWHillsClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Hills Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWIntersections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axel_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axel straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Intersections',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWIntersectionsClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axel_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axel straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Intersections Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWIntersectionsClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axel_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axel straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Intersections Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWIntersectionsClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axel_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axel straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Intersections Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWIntersectionsClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axel_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axel straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Intersections Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWLightsAndSignals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Lights and Signals',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWLightsAndSignalsClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Lights and Signals Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWLightsAndSignalsClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Lights and Signals Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWLightsAndSignalsClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Lights and Signals Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWLightsAndSignalsClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Lights and Signals Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWMultipleTrailers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heavier_trailer_in_front', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Heavier trailer in front')),
                ('builds_equip_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Builds equip properly')),
                ('understand_types_of_dollies', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Understand types of dollies')),
                ('secures_dolly_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures dolly properly')),
                ('speed_control_on_turns', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed control on turns')),
                ('avoids_abrupt_meneuvers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids abrupt maneuvers')),
                ('backs_one_item', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs one item at a time')),
                ('safe_while_connecting_dolly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safe while connecting dolly')),
                ('avoid_shifting_load', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting load')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Multiple trailers',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWMultipleTrailersClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heavier_trailer_in_front', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Heavier trailer in front')),
                ('builds_equip_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Builds equip properly')),
                ('understand_types_of_dollies', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Understand types of dollies')),
                ('secures_dolly_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures dolly properly')),
                ('speed_control_on_turns', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed control on turns')),
                ('avoids_abrupt_meneuvers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids abrupt maneuvers')),
                ('backs_one_item', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs one item at a time')),
                ('safe_while_connecting_dolly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safe while connecting dolly')),
                ('avoid_shifting_load', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting load')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Multiple trailers Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWMultipleTrailersClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heavier_trailer_in_front', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Heavier trailer in front')),
                ('builds_equip_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Builds equip properly')),
                ('understand_types_of_dollies', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Understand types of dollies')),
                ('secures_dolly_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures dolly properly')),
                ('speed_control_on_turns', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed control on turns')),
                ('avoids_abrupt_meneuvers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids abrupt maneuvers')),
                ('backs_one_item', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs one item at a time')),
                ('safe_while_connecting_dolly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safe while connecting dolly')),
                ('avoid_shifting_load', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting load')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Multiple trailers Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWParking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Parking',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWParkingClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Parking Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWParkingClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Parking Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWParkingClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Parking Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWParkingClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Parking Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWPassing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Passing',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWPassingClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Passing Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWPassingClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Passing Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWPassingClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Passing Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWPassingClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Passing Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWRecognizesHazards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Recognizes Hazards',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWRecognizesHazardsClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Recognizes Hazards Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWRecognizesHazardsClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Recognizes Hazards Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWRecognizesHazardsClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Recognizes Hazards Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWRecognizesHazardsClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Recognizes Hazards Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Speed',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSpeedClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Speed Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSpeedClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Speed Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSpeedClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Speed Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSpeedClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Speed Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWStartEngine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_park_or_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Park or Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clutch depressed')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Start Engine',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWStartEngineClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clutch depressed')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Start Engine Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWStartEngineClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clutch depressed')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Start Engine Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWStartEngineClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clutch depressed')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Start Engine Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWStartEngineClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clutch depressed')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Start Engine Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSteering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Steering',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSteeringClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Steering Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSteeringClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Steering Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSteeringClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Steering Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWSteeringClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Steering Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWTurning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Turning',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWTurningClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Turning Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWTurningClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Turning Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWTurningClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Turning Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWTurningClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Turning Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWUncoupling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('lower_landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lower Landing Gear')),
                ('pull_away_or_trailer_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull away/trailer secure')),
                ('leve_or_firm_ground', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leve/firm ground')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Uncoupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWUncouplingClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('lower_landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lower Landing Gear')),
                ('pull_away_or_trailer_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull away/trailer secure')),
                ('leve_or_firm_ground', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leve/firm ground')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Uncoupling Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='BTWUncouplingClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secures_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures equipment')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('lower_landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lower Landing Gear')),
                ('pull_away_or_trailer_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull away/trailer secure')),
                ('leve_or_firm_ground', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leve/firm ground')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW Uncoupling Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=None, max_length=150, verbose_name='Company Name')),
                ('company_id', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Company ID')),
                ('city', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='State')),
                ('phone', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Phone')),
                ('address', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Address')),
                ('zip_code', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='ZIP Code')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='InstructorProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_number', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Customer Number')),
                ('contact_name', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Contact Name')),
                ('driver_id', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Driver ID')),
                ('driver_license_number', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Driver License Num')),
                ('driver_license_state', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='Driver License State')),
                ('driver_license_expire_date', models.DateField(blank=True, default=None, null=True, verbose_name='Dirver License Expiration Date')),
                ('driver_license_class', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], default=None, max_length=1, null=True, verbose_name='Driver License Class')),
                ('endorsement', models.CharField(blank=True, max_length=120, null=True, verbose_name='Endorsement')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Instructor Profile',
                'verbose_name_plural': 'Instructor Profiles',
                'ordering': ('user__username',),
            },
        ),
        migrations.CreateModel(
            name='PASBacking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_of_situation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Size up situation')),
                ('driver_side_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Driver side back')),
                ('check_rear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check rear')),
                ('gets_attention', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets Attention')),
                ('backs_slowly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Backs slowly')),
                ('rechecks_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Re-checks conditions')),
                ('uses_other_aids', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses other aids')),
                ('steers_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steers correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit dock')),
                ('use_spotter', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use a spotter (if applicable)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Backing',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASBrakesAndStoppings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear_or_gives_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks rear/gives warning')),
                ('full_stop_or_smooth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full Stop/Smooth(no rebound)')),
                ('does_not_fan', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t fan')),
                ('down_shifts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Down Shifts')),
                ('uses_foot_brake_only', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses foot brake only')),
                ('hand_valve_use', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand valve use')),
                ('does_not_roll_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t roll back')),
                ('engine_assist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Assist')),
                ('avoids_sudden_stops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids sudden stops')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'BTW - Use of Brakes and Stopping',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASCabSafety',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('can_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab distractions')),
                ('cab_obstructions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Obstructions')),
                ('cab_chemicals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab Chemicals')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS Cab Safety',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASEngineOperation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_revving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Gauges')),
                ('start_off_smoothly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start Off Smoothly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Engine Operation',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASEyeMovementAndMirror',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eyes_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eyes ahead')),
                ('follow_up_in_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Follow-up in mirror')),
                ('checks_mirror', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks mirrors 5 to 8 sec’s')),
                ('scans_does_not_stare', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scans doesn’t stare')),
                ('avoid_billboards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Billboards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Eye movement and mirror use',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASGeneralSafetyAndDOTAdherence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avoids_crowding_effect', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids crowding effect')),
                ('stays_right_or_correct_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays to the right/correct lane')),
                ('aware_hours_of_service', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of hours of service')),
                ('proper_use_off_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of mirrors')),
                ('self_confident_not_complacement', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Self confident not complacent')),
                ('check_instruments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks instruments')),
                ('uses_horn_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses horn properly')),
                ('maintains_dot_log', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintains DOT log')),
                ('drives_defensively', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drives defensively')),
                ('company_haz_mat_protocol', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Company Haz Mat protocol')),
                ('air_cans_or_line_moisture_free', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air cans/lines free of moisture')),
                ('avoid_distractions_while_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid distractions while driving')),
                ('works_safely_to_avoid_injuries', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Works safely to avoid injuries')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - General Safety and DOT adherence',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASHills',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_gear_up_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper gear up or down')),
                ('avoids_rolling_back', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids rolling back H/V')),
                ('test_brakes_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test brakes prior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Hills',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASIntersections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach_decision_point', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Approach -decision point')),
                ('clear_intersection', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear Intersection L-R-L')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Check Mirrors')),
                ('full_stop', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Full stop when needed')),
                ('times_light_or_starts', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Times light or starts too fast')),
                ('steering_axle_staright', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering axle straight')),
                ('yields_right_of_way', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Yields right-of-way')),
                ('proper_speed_or_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper speed/gear')),
                ('leaves_space', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaves space for an out')),
                ('stop_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop Lines - crosswalks')),
                ('railroad_crossings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Railroad crossings')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Intersections',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASLightsAndSignals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proper_use_of_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper use of lights')),
                ('adjust_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust Speed')),
                ('signals_well_in_advance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals well in advance')),
                ('cancels_signal', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cancels signal')),
                ('use_of_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use of 4 Ways')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Lights and Signals',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASParking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_curb', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Doesn’t hit curb')),
                ('curbs_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Curbs wheels')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock wheels (if required)')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in neutral')),
                ('engine_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine off - Take keys')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Parking',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASPassengerSafety',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('no_one_past_standee_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='No One Past Standee Line')),
                ('steps_clear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steps Clear')),
                ('everyone_seated', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Everyone Seated')),
                ('seatbelts_on', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seatbelts On (if required)')),
                ('holding_hand_rails_standing', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Holding Hand Rails Standing')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Passenger Safety',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASPassing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sufficient_space_to_pass', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sufficient Space to Pass')),
                ('signals_property', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals Property')),
                ('check_mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Checks Mirrors')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Passing',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASRailroadCrossing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_and_activate_4_ways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signal & Activate 4-ways')),
                ('stop_prior', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stop 10’ to 50’ prior')),
                ('open_window_and_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Open window & door')),
                ('look_listen_clear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Look, Listen & Clear')),
                ('signal_and_merge_into_traffic', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signal & merge into traffic')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Railroad Crossing',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASRecognizesHazards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Horn to communicate')),
                ('makes_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Makes Adjustments')),
                ('path_of_least_resistance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Path of least resistance')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Recognizes Hazards',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PassengerVehicles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pas/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pas/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pas/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Passenger Vehicle',
                'verbose_name_plural': 'PAS - Passenger Vehicles',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjust_to_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Adjust to conditions')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('proper_following_distance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Following distance')),
                ('speed_on_curves', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed on Curves')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Speed',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASStartEngine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Applied')),
                ('trans_in_neutral', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trans in Neutral')),
                ('uses_starter_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses Starter Properly')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Start Engine',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASSteering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('over_steers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Over Steers')),
                ('floats', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Floats')),
                ('poisture_and_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Posture and Grip')),
                ('centered_in_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Centered in lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Steering',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PASTurning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signals_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Signals correctly')),
                ('gets_in_proper_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gets in proper lane')),
                ('downshifts_to_pulling_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Downshifts to pulling gear')),
                ('handles_light_correctly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles light correctly')),
                ('setup_and_execution', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Set up and execution')),
                ('turn_speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Speed')),
                ('mirror_follow_up', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirror follow up')),
                ('turns_lane_to_lane', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turns lane to lane')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'PAS - Turning',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBothSidesVehicle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('vehicle_markings_or_decals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Vehicle Markings/Decals')),
                ('dots', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DOT’s, CA, MC #’s')),
                ('ifta_permit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='IFTA Permit')),
                ('air_tanks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Tanks')),
                ('fuel_tank_alternative', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuel Tank - Alternative Fuel')),
                ('_def', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DEF')),
                ('battery_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Battery Box')),
                ('deck_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Deck Plate')),
                ('air_lines_lights_cord_spring', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines, Light Cord, Spring')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th Wheel')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('drive_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drive Line')),
                ('air_cans_or_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans/Lines')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Both Sides Vehicle',
                'verbose_name_plural': 'Pre Trip Both Sides Vehicles',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBothSidesVehiclesClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('vehicle_markings_or_decals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Vehicle Markings/Decals')),
                ('dots', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DOT’s, CA, MC #’s')),
                ('ifta_permit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='IFTA Permit')),
                ('air_tanks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Tanks')),
                ('fuel_tank_alternative', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuel Tank - Alternative Fuel')),
                ('_def', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DEF')),
                ('battery_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Battery Box')),
                ('deck_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Deck Plate')),
                ('air_lines_lights_cord_spring', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines, Light Cord, Spring')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th Wheel')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('drive_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drive Line')),
                ('air_cans_or_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans/Lines')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Both Sides Vehicles Class A',
                'verbose_name_plural': 'Pre Trip Both Sides Vehicles Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBothSidesVehiclesClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('vehicle_markings_or_decals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Vehicle Markings/Decals')),
                ('dots', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DOT’s, CA, MC #’s')),
                ('ifta_permit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='IFTA Permit')),
                ('air_tanks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Tanks')),
                ('fuel_tank_alternative', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuel Tank - Alternative Fuel')),
                ('_def', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DEF')),
                ('battery_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Battery Box')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('drive_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drive Line')),
                ('air_cans_or_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans/Lines')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Both Sides Vehicles Class B',
                'verbose_name_plural': 'Pre Trip Both Sides Vehicles Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBothSidesVehiclesClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verify_vehicle_height', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Verify Vehicle Height')),
                ('clearance_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clearance Lights')),
                ('equipment_number_and_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Number & Markings')),
                ('mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('fuel_tank_alternative', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuel Tank - Alternative Fuel')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('drive_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drive Line')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Both Sides Vehicles Class C',
                'verbose_name_plural': 'Pre Trip Both Sides Vehicles Class C List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBothSidesVehiclesClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mirrors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('vehicle_markings_or_decals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Vehicle Markings/Decals')),
                ('dots', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DOT’s, CA, MC #’s')),
                ('ifta_permit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='IFTA Permit')),
                ('air_tanks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Tanks')),
                ('fuel_tank_alternative', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuel Tank - Alternative Fuel')),
                ('_def', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DEF')),
                ('battery_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Battery Box')),
                ('deck_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Deck Plate')),
                ('air_lines_lights_cord_spring', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines, Light Cord, Spring')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th Wheel')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('drive_line', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Drive Line')),
                ('air_cans_or_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans/Lines')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Both Sides Vehicles Class D',
                'verbose_name_plural': 'Pre Trip Both Sides Vehicles Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripBoxHeaderBoardClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verfiy_header_board_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Verify Header Board Condition')),
                ('verify_vehicle_height', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Verify Vehicle Height')),
                ('clearance_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clearance Lights')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('refrigeration_system', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Refrigeration System')),
                ('utility_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Utility Box')),
                ('equipement_number_and_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Number and Markings')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Box Header Board Class B',
                'verbose_name_plural': 'Pre Trip Box Header Board Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCargoAreaClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_cargo_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Cargo Door')),
                ('cargo_load_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cargo, Load, Area')),
                ('all_securing_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Securing Devices')),
                ('barn_doors_or_rollup', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Barn Doors or Roll Up Door')),
                ('door_locking_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Door Locking Devices')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre TripCargo Area Class B',
                'verbose_name_plural': 'Pre Trip Cargo Area Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCargoAreaClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_cargo_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Cargo Door')),
                ('cargo_load_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cargo, Load, Area')),
                ('all_securing_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Securing Devices')),
                ('barn_doors_or_rollup', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Barn Doors or Roll Up Door')),
                ('door_locking_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Door Locking Devices')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre TripCargo Area Class B',
                'verbose_name_plural': 'Pre Trip Cargo Area Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Class A',
                'verbose_name_plural': 'Pre Trips Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Class B',
                'verbose_name_plural': 'Pre Trips Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Class C',
                'verbose_name_plural': 'Pre Trips Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Class D',
                'verbose_name_plural': 'Pre Trips Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCOALS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('cut_in', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut in')),
                ('cut_out', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut out')),
                ('air_leak_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Leak Test')),
                ('low_air_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Low Air Warning')),
                ('spring', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Spring')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip C.O.A.L.S',
                'verbose_name_plural': 'Pre Trip C.O.A.L.S',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCOALSClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('cut_in', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut in')),
                ('cut_out', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut out')),
                ('applied_air_leak_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Applied Air Leak Test')),
                ('low_air_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Low Air Warning')),
                ('spring_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Spring Test')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip COALS Class A',
                'verbose_name_plural': 'Pre Trip COALS Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCOALSClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('cut_in', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut in')),
                ('cut_out', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut out')),
                ('applied_air_leak_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Applied Air Leak Test')),
                ('low_air_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Low Air Warning')),
                ('spring_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Spring Test')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip COALS Class B',
                'verbose_name_plural': 'Pre Trip COALS Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCOALSClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chock_wheels', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chock Wheels')),
                ('cut_in', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut in')),
                ('cut_out', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cut out')),
                ('applied_air_leak_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Applied Air Leak Test')),
                ('low_air_warning', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Low Air Warning')),
                ('spring_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Spring Test')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip COALS Class D',
                'verbose_name_plural': 'Pre Trip COALS Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripCombinationVehicles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heavier_trailer_in_front', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Heavier Trailer in front')),
                ('builds_equip_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Builds Equip Properly')),
                ('understand_types_of_dollies', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Understand Types of Dollies')),
                ('secures_dolly_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secures Dolly Properly')),
                ('speed_control_on_turns', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed Control on Turns')),
                ('avoids_abrupt_maneuvers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids Abrupt Maneuvers')),
                ('air_conditioner', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Conditioner')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Combination Vehicle',
                'verbose_name_plural': 'Combination Vehicles',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDolly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Markings')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('registration', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Registration')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('handles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles')),
                ('dolly_eye', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dolly Eye')),
                ('air_lines_and_light_cord', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines & Light Cord')),
                ('safety_chains', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Chains')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th wheel')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Dolly',
                'verbose_name_plural': 'Pre Trip Dollys',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDollyClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('dolly_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dolly Markings')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('registration', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Registration')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('handles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles')),
                ('dolly_eye', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dolly Eye')),
                ('air_lines_and_light_cord', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines & Light Cord')),
                ('safety_chains', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Chains')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th wheel')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Dolly Class A',
                'verbose_name_plural': 'Pre Trip Dolly Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDollyClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('dolly_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dolly Markings')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('registration', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Registration')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('handles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Handles')),
                ('dolly_eye', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dolly Eye')),
                ('air_lines_and_light_cord', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines & Light Cord')),
                ('safety_chains', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Chains')),
                ('fifth_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='5th wheel')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Dolly Class D',
                'verbose_name_plural': 'Pre Trip Dolly Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDriverSideBoxClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Spacer')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Driver Side Trailer Box Class B',
                'verbose_name_plural': 'Driver Side Trailer Box Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDriverSideTrailerBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Driver Side Trailer Box',
                'verbose_name_plural': 'Driver Side Trailer Box',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDriverSideTrailerBoxClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Driver Side Trailer Box Class A',
                'verbose_name_plural': 'Driver Side Trailer Box Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripDriverSideTrailerBoxClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Driver Side Trailer Box Class D',
                'verbose_name_plural': 'Driver Side Trailer Box Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripEngineCompartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuses')),
                ('hood_latches', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Latches')),
                ('hood_locking_device', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Locking Device')),
                ('engine_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Oil')),
                ('transmission_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Oil')),
                ('power_steering_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Power Steering Fluid')),
                ('washer_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Washer Fluid')),
                ('coolant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coolant')),
                ('belts_and_hoses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Belts and Hoses')),
                ('filters', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Filters')),
                ('components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Components')),
                ('leaks_air_and_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaks(Air & Fluid)')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('steering_components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Components')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('brake_drums_and_pads', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Pads')),
                ('wheel_bearings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel Bearings')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rin_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition')),
                ('valve_stems_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Engine Compartment',
                'verbose_name_plural': 'Pre Trip Engine Compartments',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripEngineCompartmentClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuses')),
                ('hood_latches', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Latches')),
                ('hood_locking_device', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Locking Device')),
                ('engine_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Oil')),
                ('transmission_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Oil')),
                ('power_steering_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Power Steering Fluid')),
                ('washer_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Washer Fluid')),
                ('coolant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coolant')),
                ('belts_and_hoses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Belts and Hoses')),
                ('filters', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Filters')),
                ('components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Components')),
                ('leaks_air_and_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaks(Air & Fluid)')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('steering_components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Components')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adjustors')),
                ('brake_drums_and_pads', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Pads')),
                ('wheel_bearings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel Bearings')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rin_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition')),
                ('valve_stems_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Engine Compartment Class A',
                'verbose_name_plural': 'Pre Trip Engine Compartment Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripEngineCompartmentClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuses')),
                ('hood_latches', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Latches')),
                ('hood_locking_device', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Locking Device')),
                ('engine_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Oil')),
                ('transmission_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Oil')),
                ('power_steering_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Power Steering Fluid')),
                ('washer_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Washer Fluid')),
                ('coolant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coolant')),
                ('belts_and_hoses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Belts and Hoses')),
                ('filters', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Filters')),
                ('components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Components')),
                ('leaks_air_and_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaks(Air & Fluid)')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('steering_components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Components')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adjustors')),
                ('brake_drums_and_pads', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Pads')),
                ('wheel_bearings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel Bearings')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rin_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition')),
                ('valve_stems_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Engine Compartment Class B',
                'verbose_name_plural': 'Pre Trip Engine Compartment Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripEngineCompartmentClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuses')),
                ('hood_latches', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Latches')),
                ('hood_locking_device', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Locking Device')),
                ('engine_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Oil')),
                ('transmission_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Oil')),
                ('power_steering_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Power Steering Fluid')),
                ('washer_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Washer Fluid')),
                ('coolant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coolant')),
                ('belts_and_hoses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Belts and Hoses')),
                ('filters', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Filters')),
                ('components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Components')),
                ('leaks_air_and_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaks(Air & Fluid)')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('steering_components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Components')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adjustors')),
                ('brake_drums_and_pads', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Pads')),
                ('wheel_bearings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel Bearings')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rin_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition')),
                ('valve_stems_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Engine Compartment Class C',
                'verbose_name_plural': 'Pre Trip Engine Compartment Class C List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripEngineCompartmentClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fuses')),
                ('hood_latches', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Latches')),
                ('hood_locking_device', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hood Locking Device')),
                ('engine_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Engine Oil')),
                ('transmission_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Oil')),
                ('power_steering_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Power Steering Fluid')),
                ('washer_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Washer Fluid')),
                ('coolant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coolant')),
                ('belts_and_hoses', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Belts and Hoses')),
                ('filters', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Filters')),
                ('components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Components')),
                ('leaks_air_and_fluid', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leaks(Air & Fluid)')),
                ('frame', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('steering_components', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Components')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adjustors')),
                ('brake_drums_and_pads', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Pads')),
                ('wheel_bearings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wheel Bearings')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rin_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition')),
                ('valve_stems_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stems & Hub Oil')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Engine Compartment Class D',
                'verbose_name_plural': 'Pre Trip Engine Compartment Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripFrontTrailerBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_height_and_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Height & Condition')),
                ('clearance_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clearance Lights')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('chassis_and_locks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis and Chassis Locks')),
                ('refrigeration_system', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Refrigeration System')),
                ('federal_inspection_or_bit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Federal Inspection or BIT')),
                ('utility_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Utility Box')),
                ('electric_plug', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Electric Plug')),
                ('glad_hands_and_grommets', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Glad Hands and Grommets')),
                ('air_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Lines')),
                ('equipement_number_and_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Number and Markings')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Front of Trailer Box',
                'verbose_name_plural': 'Front of Trailer Box',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripFrontTrailerBoxClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_height_and_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Height & Condition')),
                ('clearance_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clearance Lights')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('chassis_and_locks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis and Chassis Locks')),
                ('refrigeration_system', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Refrigeration System')),
                ('federal_inspection_or_bit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Federal Inspection or BIT')),
                ('utility_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Utility Box')),
                ('electric_plug_and_air_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Electric Plug & Air Lines')),
                ('glad_hands_and_grommets', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Glad Hands and Grommets')),
                ('equipement_number_and_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Number and Markings')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Front or Trailer - Header Board Class A',
                'verbose_name_plural': 'Pre Trip Front or Trailer - Header Board Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripFrontTrailerBoxClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_height_and_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Height & Condition')),
                ('clearance_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clearance Lights')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('chassis_and_locks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis and Chassis Locks')),
                ('refrigeration_system', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Refrigeration System')),
                ('federal_inspection_or_bit', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Federal Inspection or BIT')),
                ('utility_box', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Utility Box')),
                ('electric_plug_and_air_lines', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Electric Plug & Air Lines')),
                ('glad_hands_and_grommets', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Glad Hands and Grommets')),
                ('equipement_number_and_markings', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Number and Markings')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Front or Trailer - Header Board Class D',
                'verbose_name_plural': 'Pre Trip Front or Trailer - Header Board Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripInsideCab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fhwa', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='FHWA')),
                ('emergency_response_book', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Emergency Response Book')),
                ('dvir', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DVIR')),
                ('parking_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral_or_park', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Neutral/Park')),
                ('seat_adjustment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Adjustment')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_or_berth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab/Berth')),
                ('dome_and_map_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dome and Map Lights')),
                ('windows', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Windows')),
                ('mirros_adjustments', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors Adjustment')),
                ('steering_wheel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Wheel')),
                ('horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Horn')),
                ('indicators', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Indicators')),
                ('wipers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wipers')),
                ('gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gauges')),
                ('air_heater_defrost', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Heater, Defrost')),
                ('bi_directional_triangles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bi-directional Triangles')),
                ('shifter_straight_and_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter Straight and Secure')),
                ('splitter', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Splitter')),
                ('clear_floor_board', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear floor Board')),
                ('pedals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pedals')),
                ('park_brake', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake')),
                ('service_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Service Brake Test')),
                ('trailer_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trailer Brake Test')),
                ('pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull Key')),
                ('exit_safely', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Exit Safely')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Inside Cab',
                'verbose_name_plural': 'Pre Trip Inside Cabs',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripInsideCabClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hand_rails', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand Rails')),
                ('fire_extinguisher', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fire Extinguisher')),
                ('fhwa', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='FHWA')),
                ('emergency_response_book', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Emergency Response Book')),
                ('dvir', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DVIR')),
                ('parking_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral_or_park', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Neutral/Park')),
                ('seat_adjustment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Adjustment')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_or_berth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab/Berth')),
                ('dome_and_map_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dome and Map Lights')),
                ('windows', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Windows')),
                ('mirros', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('steering_wheel_play', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Wheel Play')),
                ('horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Horn')),
                ('indicators', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Indicators')),
                ('wipers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wipers')),
                ('gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gauges')),
                ('air_heater_defrost', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Heater, Defrost')),
                ('bi_directional_triangles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bi-directional Triangles')),
                ('shifter_straight_and_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter Straight and Secure')),
                ('splitter', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Splitter')),
                ('clear_floor_board', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear floor Board')),
                ('pedals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pedals')),
                ('park_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Test')),
                ('service_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Service Brake Test')),
                ('trailer_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trailer Brake Test')),
                ('pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull Key')),
                ('exit_safely', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Exit Safely')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Inside Cab Class A',
                'verbose_name_plural': 'Pre Trip Inside Cab Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripInsideCabClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hand_rails', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand Rails')),
                ('fire_extinguisher', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fire Extinguisher')),
                ('fhwa', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='FHWA')),
                ('emergency_response_book', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Emergency Response Book')),
                ('dvir', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DVIR')),
                ('parking_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral_or_park', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Neutral/Park')),
                ('seat_adjustment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Adjustment')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('dome_and_map_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dome and Map Lights')),
                ('windows', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Windows')),
                ('mirros', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('steering_wheel_play', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Wheel Play')),
                ('horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Horn')),
                ('indicators', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Indicators')),
                ('wipers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wipers')),
                ('gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gauges')),
                ('air_heater_defrost', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Heater, Defrost')),
                ('bi_directional_triangles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bi-directional Triangles')),
                ('shifter_straight_and_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter Straight and Secure')),
                ('splitter', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Splitter')),
                ('clear_floor_board', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear floor Board')),
                ('pedals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pedals')),
                ('park_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Test')),
                ('service_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Service Brake Test')),
                ('pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull Key')),
                ('exit_safely', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Exit Safely')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Inside Cab Class B',
                'verbose_name_plural': 'Pre Trip Inside Cab Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripInsideCabClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hand_rails', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand Rails')),
                ('fire_extinguisher', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fire Extinguisher')),
                ('emergency_response_book', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Emergency Response Book')),
                ('dvir', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DVIR')),
                ('parking_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral_or_park', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Neutral/Park')),
                ('seat_adjustment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Adjustment')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('dome_and_map_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dome and Map Lights')),
                ('windows', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Windows')),
                ('mirros', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('steering_wheel_play', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Wheel Play')),
                ('horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Horn')),
                ('indicators', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Indicators')),
                ('wipers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wipers')),
                ('gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gauges')),
                ('air_heater_defrost', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Heater, Defrost')),
                ('bi_directional_triangles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bi-directional Triangles')),
                ('shifter_straight_and_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter Straight and Secure')),
                ('clear_floor_board', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear floor Board')),
                ('pedals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pedals')),
                ('park_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Test')),
                ('service_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Service Brake Test')),
                ('pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull Key')),
                ('exit_safely', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Exit Safely')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Inside Cab Class C',
                'verbose_name_plural': 'Pre Trip Inside Cab Class C List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripInsideCabClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hand_rails', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hand Rails')),
                ('fire_extinguisher', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fire Extinguisher')),
                ('fhwa', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='FHWA')),
                ('emergency_response_book', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Emergency Response Book')),
                ('dvir', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='DVIR')),
                ('parking_brake_applied', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral_or_park', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Transmission Neutral/Park')),
                ('seat_adjustment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Adjustment')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('cab_or_berth', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cab/Berth')),
                ('dome_and_map_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dome and Map Lights')),
                ('windows', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Windows')),
                ('mirros', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mirrors')),
                ('steering_wheel_play', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Steering Wheel Play')),
                ('horn', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Horn')),
                ('indicators', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Indicators')),
                ('wipers', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wipers')),
                ('gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Gauges')),
                ('air_heater_defrost', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Heater, Defrost')),
                ('bi_directional_triangles', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bi-directional Triangles')),
                ('shifter_straight_and_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shifter Straight and Secure')),
                ('splitter', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Splitter')),
                ('clear_floor_board', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clear floor Board')),
                ('pedals', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pedals')),
                ('park_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Park Brake Test')),
                ('service_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Service Brake Test')),
                ('trailer_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Trailer Brake Test')),
                ('pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pull Key')),
                ('exit_safely', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Exit Safely')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Inside Cab Class D',
                'verbose_name_plural': 'Pre Trip Inside Cab Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPassengerSideBoxClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Passenger Side Box Class B',
                'verbose_name_plural': 'Pre Trip Passenger Side Box Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPassengerSideTrailerBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Passenger Side Trailer or Box',
                'verbose_name_plural': 'Passenger Side Trailer or Box',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPassengerSideTrailerBoxClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Passenger Side Trailer or Box Class A',
                'verbose_name_plural': 'Pre Trip Passenger Side Trailer or Box Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPassengerSideTrailerBoxClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('reflectors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors')),
                ('marker_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Marker Lights')),
                ('coupling', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling')),
                ('frame_and_chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Frame & Chassis')),
                ('landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Landing Gear')),
                ('air_cans', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air Cans')),
                ('brake_chambers_or_slack_adj', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Chambers/Slack Adj')),
                ('axel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Axel')),
                ('suspension', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Suspension')),
                ('brake_drums_and_lining', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake Drums & Lining')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('tire_and_rim_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire & Rim Condition - Space')),
                ('valve_stem_and_hub_oil', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Valve Stem & Hub Oil')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Passenger Side Trailer or Box Class D',
                'verbose_name_plural': 'Pre Trip Passenger Side Trailer or Box Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPostTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('all_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Lights')),
                ('tire_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Condition')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('hub_heat', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hub Heat')),
                ('reflective_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflective Devices')),
                ('fluid_air_leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fluid & Air Leaks')),
                ('equipment_parked_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipement Parked - Secure')),
                ('avoid_shifting_lead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting Lead')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Post Trip',
                'verbose_name_plural': 'Pre Trip Post Trips',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPostTripClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('all_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Lights')),
                ('tire_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Condition')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('hub_heat', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hub Heat')),
                ('reflective_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflective Devices')),
                ('fluid_air_leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fluid & Air Leaks')),
                ('equipment_parked_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipement Parked - Secure')),
                ('avoid_shifting_lead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting Lead')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip PostTrip Class A',
                'verbose_name_plural': 'Pre Trip PostTrip Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPostTripClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('all_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Lights')),
                ('tire_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Condition')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('hub_heat', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hub Heat')),
                ('reflective_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflective Devices')),
                ('fluid_air_leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fluid & Air Leaks')),
                ('equipment_parked_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipement Parked - Secure')),
                ('avoid_shifting_lead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting Lead')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip PostTrip Class B',
                'verbose_name_plural': 'Pre Trip PostTrip Class B',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPostTripClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('all_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Lights')),
                ('tire_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Condition')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('hub_heat', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hub Heat')),
                ('reflective_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflective Devices')),
                ('fluid_air_leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fluid & Air Leaks')),
                ('equipment_parked_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipement Parked - Secure')),
                ('avoid_shifting_lead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting Lead')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip PostTrip Class C',
                'verbose_name_plural': 'Pre Trip PostTrip Class C',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripPostTripClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Condition')),
                ('all_lights', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Lights')),
                ('tire_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Condition')),
                ('tire_inflation', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Tire Inflation')),
                ('hub_heat', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Hub Heat')),
                ('reflective_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflective Devices')),
                ('fluid_air_leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Fluid & Air Leaks')),
                ('equipment_parked_secure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipement Parked - Secure')),
                ('avoid_shifting_lead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoid Shifting Lead')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip PostTrip Class D',
                'verbose_name_plural': 'Pre Trip PostTrip Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripRearTrailerBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('all_cargo_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Cargo Door')),
                ('cargo_load_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cargo Load Area')),
                ('all_securing_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Securing Devices')),
                ('chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis')),
                ('coupling_devices_or_plintle', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling Devices/Pintle')),
                ('air_elctrical', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Electrical')),
                ('safety_loops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Loops')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('flector_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Flector Devices')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Rear Trailer Box',
                'verbose_name_plural': 'Pre Trip Rear Trailer Box',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripRearTrailerBoxClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('all_cargo_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Cargo Door')),
                ('cargo_load_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cargo, Load, Area')),
                ('all_securing_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Securing Devices')),
                ('chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis')),
                ('coupling_devices_or_plintle', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling Devices/Pintle')),
                ('air_elctrical', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Electrical')),
                ('safety_loops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Loops')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('flector_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Flector Devices')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Rear Trailer Box Class A',
                'verbose_name_plural': 'Pre Trip Rear Trailer Box Class A',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripRearTrailerBoxClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('all_cargo_door', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Cargo Door')),
                ('cargo_load_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Cargo, Load, Area')),
                ('all_securing_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='All Securing Devices')),
                ('chassis', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Chassis')),
                ('coupling_devices_or_plintle', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Coupling Devices/Pintle')),
                ('air_elctrical', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Air, Electrical')),
                ('safety_loops', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Safety Loops')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('flector_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Flector Devices')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Rear Trailer Box Class D',
                'verbose_name_plural': 'Pre Trip Rear Trailer Box Class D',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleFront',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_damage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Damage')),
                ('lights_id_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lights-I.D. mkr, head, 4way, road')),
                ('bumper_and_tow_hooks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bumper and Tow Hooks')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('sensors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sensors')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Front',
                'verbose_name_plural': 'Pre Trip Vehicle Fronts',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleFrontClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_damage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Damage')),
                ('lights_id_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lights-I.D. mkr, head, 4way, road')),
                ('bumper_and_tow_hooks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bumper and Tow Hooks')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('sensors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sensors')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Front Class A',
                'verbose_name_plural': 'Pre Trip Vehicle Front Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleFrontClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_damage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Damage')),
                ('lights_id_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lights-I.D. mkr, head, 4way, road')),
                ('bumper_and_tow_hooks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bumper and Tow Hooks')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('sensors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sensors')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Front Class B',
                'verbose_name_plural': 'Pre Trip Vehicle Front Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleFrontClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_damage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Damage')),
                ('lights_id_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lights-I.D. mkr, head, 4way, road')),
                ('bumper_and_tow_hooks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bumper and Tow Hooks')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('sensors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sensors')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Front Class C',
                'verbose_name_plural': 'Pre Trip Vehicle Front Class C List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleFrontClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_damage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Damage')),
                ('lights_id_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lights-I.D. mkr, head, 4way, road')),
                ('bumper_and_tow_hooks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bumper and Tow Hooks')),
                ('license_plate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='License Plate')),
                ('sensors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Sensors')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Front Class D',
                'verbose_name_plural': 'Pre Trip Vehicle Front Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleOrTractorRear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('reflectors_and_work_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors & Work Light')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('couple_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Couple Devices')),
                ('license_plate_and_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Licenses Plate & Light')),
                ('notes', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Trip Vehicle/Tractor Rear',
                'verbose_name_plural': 'Trip Vehicle/Tractor Rears',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleOrTractorRearClassA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('reflectors_and_work_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors & Work Light')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('couple_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Couple Devices')),
                ('license_plate_and_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Licenses Plate & Light')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle/TractorRear Class A',
                'verbose_name_plural': 'Pre Trip Vehicle/TractorRear Class A List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleOrTractorRearClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('reflectors_and_work_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors & Work Light')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('couple_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Couple Devices')),
                ('license_plate_and_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Licenses Plate & Light')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle/TractorRear Class B',
                'verbose_name_plural': 'Pre Trip Vehicle/TractorRear Class B List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleOrTractorRearClassD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('reflectors_and_work_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors & Work Light')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('couple_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Couple Devices')),
                ('license_plate_and_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Licenses Plate & Light')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle/TractorRear Class D',
                'verbose_name_plural': 'Pre Trip Vehicle/TractorRear Class D List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='PreTripVehicleRearClassC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brake_and_others', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brake, Tail, 4way, Signal Lights')),
                ('body_condition', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Body Condition')),
                ('reflectors_and_work_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Reflectors & Work Light')),
                ('mud_flaps', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Mud Flaps')),
                ('couple_devices', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Couple Devices')),
                ('license_plate_and_light', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Licenses Plate & Light')),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip Vehicle Rear Class C',
                'verbose_name_plural': 'Pre Trip Vehicle Rear Class C List',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SafeDriveBTW',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/btw/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Behind The Wheel',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SafeDriveEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_unit_number', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Power Unit Number')),
                ('transmission_type', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Permission Type')),
                ('vehicle_type', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Vehicle Type')),
                ('vehicle_type_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Vehicle Type Other')),
                ('vehicle_manufacturer', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Vehicle Manufacturer')),
                ('vehicle_manufacturer_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Vehicle Manufacturer Other')),
                ('single_trailer_length', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Single Trailer Length')),
                ('single_trailer_length_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Single Trailer Length Other')),
                ('combination_vehicles', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Combination Vehicles')),
                ('combinations_vehicles_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Combination Vehicles Other')),
                ('combination_vehicles_length', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Combination Vehicles Other')),
                ('combination_vehicles_length_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Combination Vehicles Length Other')),
                ('dolly_or_gear_type', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Dolly/Gear Type')),
                ('dolly_or_gear_type_other', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Dolly/Gear Type Other')),
                ('trailer_1', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('trailer_2', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('trailer_3', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('dolly_1', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('dolly_2', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipments',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SafeDriveEye',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField(blank=True, default=None, null=True)),
                ('stop_time', models.TimeField(blank=True, default=None, null=True)),
                ('eye_movement', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='Eye Movement')),
                ('eye_lead_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Eye Lead Counter')),
                ('parked_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Parked Counter')),
                ('intersections_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Intersections Counter')),
                ('parked_cars_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Parked Cars Counter')),
                ('predestrians_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Predestrians Counter')),
                ('follow_time_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Follow Time Counter')),
                ('rear_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Rear Counter')),
                ('front_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Front Counter')),
                ('gauges_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Front Counter')),
                ('left_mirror_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Left Mirror Counter')),
                ('right_mirror_counter', models.IntegerField(blank=True, default=None, null=True, verbose_name='Right Mirror Counter')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Eye',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SafeDriveNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'ordering': ('student__first_name', 'student__last_name', '-created'),
            },
        ),
        migrations.CreateModel(
            name='SafeDrivePreTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/pre-trip/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pre Trip',
                'verbose_name_plural': 'Pre Trips',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SafeDriveProd',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('department', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Department')),
                ('on_time', models.BooleanField(default=False, verbose_name='On Time')),
                ('keys_ready', models.BooleanField(default=False, verbose_name='Keys Ready')),
                ('timecard_system_ready', models.BooleanField(default=False, verbose_name='Timecard System Ready')),
                ('equipment_ready', models.BooleanField(default=False, verbose_name='Equipment Ready')),
                ('equipment_clean', models.BooleanField(default=False, verbose_name='Equipment Clean')),
                ('start_odometer', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Start Odometer')),
                ('finish_odometer', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Finish Odometer')),
                ('miles', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=6, null=True, verbose_name='Miles')),
                ('location', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Location')),
                ('trailer', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Trailer')),
                ('start_work', models.IntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, null=True, verbose_name='Start Work')),
                ('leave_building', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Leave Building')),
                ('travel_path', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Travel Path')),
                ('speed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Speed')),
                ('idle_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Idle Time')),
                ('plan_ahead', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Plan Ahead')),
                ('turn_around', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Turn Around')),
                ('on_schedule', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='On Schedule')),
                ('customer_contact', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Customer Contact')),
                ('not_ready_situations', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Not Ready Situations')),
                ('brisk_pace', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Brisk Pace')),
                ('finish_work', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Finish Work')),
                ('odometer', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Odometer')),
                ('route_number', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Route Number')),
                ('employee', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Employee')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/driver/')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/evaluator/')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/company/')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('observer_first_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Observer First Name')),
                ('observer_last_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Observer Last Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Prod',
                'verbose_name_plural': 'Prods',
            },
        ),
        migrations.CreateModel(
            name='SafeDriveSWP',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/swp/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/swp/evaluator/', verbose_name='Evaluator Signature')),
                ('company_rep_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/swp/company/', verbose_name='Company Rep Signature')),
                ('company_rep_name', models.CharField(blank=True, default=None, max_length=150, null=True, verbose_name='Company Rep. Name')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'SWP',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Cell')),
                ('city', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='City')),
                ('country', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='State')),
                ('territory', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Territory')),
                ('address1', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Address 1')),
                ('address2', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Address 2')),
                ('zip_code', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='ZIP Code')),
                ('contact_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Contact Name')),
                ('current_user_identity', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Current User Idenity')),
                ('budget', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Budget')),
                ('category1_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 1 Name')),
                ('category1_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 1 Value')),
                ('category2_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 2 Name')),
                ('category2_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 2 Value')),
                ('category3_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 3 Name')),
                ('category3_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 3 Value')),
                ('category4_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 4 Name')),
                ('category4_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 4 Value')),
                ('category5_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 5 Name')),
                ('category5_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 5 Value')),
                ('category6_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 6 Name')),
                ('category6_value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Category 6 Value')),
                ('chart_ref', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Chart Ref')),
                ('client_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Client Name')),
                ('client_number', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Client Number')),
                ('customer_number', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='Customer Number')),
                ('date_of_hire', models.DateField(blank=True, default=None, null=True, verbose_name='Date of Hire')),
                ('detractors', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Detractors')),
                ('discount_item', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Discount Item')),
                ('discount_service', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Discount Service')),
                ('driver_id', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Driver ID')),
                ('driver_license_number', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Driver License Num')),
                ('driver_license_state', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='Driver License State')),
                ('driver_license_expire_date', models.DateField(blank=True, default=None, null=True, verbose_name='Dirver License Expiration Date')),
                ('driver_eld_exempt', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Driver ELD Exempt')),
                ('endorsements', models.BooleanField(default=False, verbose_name='Endorsement')),
                ('driver_license_class', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], default=None, max_length=1, null=True, verbose_name='Driver License Class')),
                ('location', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Location')),
                ('corrective_lense_required', models.BooleanField(default=False, verbose_name='Corrective Lense Required')),
                ('dot_expiration_date', models.DateField(blank=True, default=None, null=True, verbose_name='DOT Expiration Date')),
                ('driver_duty_status', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Driver Duty Status')),
                ('history_reviewed', models.BooleanField(default=False, verbose_name='History Reviewed')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('restrictions', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Restrictions')),
                ('comments', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='Comments')),
                ('equipement', models.BooleanField(default=False, verbose_name='Equipment')),
                ('pre_post_trip', models.BooleanField(default=False, verbose_name='Pre/Trip - Post/Trip')),
                ('behind_the_wheel', models.BooleanField(default=False, verbose_name='Behind The Wheel')),
                ('eye_movement', models.BooleanField(default=False, verbose_name='Eye Movement')),
                ('safe_work_practice', models.BooleanField(default=False, verbose_name='Safe Work Practice')),
                ('production', models.BooleanField(default=False, verbose_name='Production')),
                ('vehicle_road_test', models.BooleanField(default=False, verbose_name='Vehicle Road Test')),
                ('passenger_evacuation', models.BooleanField(default=False, verbose_name='Passenger Evacaution')),
                ('passenger_pre_trip', models.BooleanField(default=False, verbose_name='Passenger Pre/Trip')),
                ('new_hire', models.BooleanField(default=False, verbose_name='New Hire')),
                ('near_miss', models.BooleanField(default=False, verbose_name='Near Miss')),
                ('incident_follow_up', models.BooleanField(default=False, verbose_name='Incident Follow-up')),
                ('change_job', models.BooleanField(default=False, verbose_name='Change Job')),
                ('change_of_equipment', models.BooleanField(default=False, verbose_name='Change of Equipment')),
                ('annual', models.BooleanField(default=False, verbose_name='Annual')),
                ('injury_date', models.DateField(blank=True, default=None, null=True, verbose_name='Injury Date')),
                ('accident_date', models.DateField(blank=True, default=None, null=True, verbose_name='Accident Date')),
                ('taw_start_date', models.DateField(blank=True, default=None, null=True, verbose_name='TAW Start Date')),
                ('taw_end_date', models.DateField(blank=True, default=None, null=True, verbose_name='TAW End Date')),
                ('lost_time_start_date', models.DateField(blank=True, default=None, null=True, verbose_name='Lost Time Start Date')),
                ('return_work_date', models.DateField(blank=True, default=None, null=True, verbose_name='Return to Work Date')),
                ('employee_number', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Employee Number')),
                ('growth', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Growth')),
                ('job_type', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='Job Type')),
                ('latitude', models.FloatField(blank=True, default=None, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, default=None, null=True, verbose_name='Longitude')),
                ('lead_source', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Lead Source')),
                ('mail_code', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Mail Code')),
                ('national_identitfier', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='National Identifier')),
                ('next_step', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Next Step')),
                ('notify_group_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Notify Group Name')),
                ('qouta', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Quota')),
                ('referral', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Referral')),
                ('manager_employee_id', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Manager Employee ID')),
                ('manager_name', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Manager Name')),
                ('manager_record_id', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Manager Record ID')),
                ('sales_tax_rate_record_id', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Sales Tax Rate Record ID')),
                ('salutation', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Salutation')),
                ('title', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Title')),
                ('url', models.URLField(blank=True, default=None, null=True, verbose_name='URL')),
                ('user_group_name', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='User Group Name')),
                ('timer_auto_sync', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Time Auto Sync')),
                ('user_identity', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='User Identity')),
                ('user_number', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='User Number')),
                ('user_type', models.CharField(blank=True, default=None, max_length=32, null=True, verbose_name='User Type')),
                ('user_note1', models.TextField(blank=True, default=None, null=True, verbose_name='User Note 1')),
                ('user_note2', models.TextField(blank=True, default=None, null=True, verbose_name='User Note 2')),
                ('value', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Value')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student Info',
                'verbose_name_plural': 'Students Info',
                'ordering': ('user__username',),
            },
        ),
        migrations.CreateModel(
            name='StudentTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=250, null=True, verbose_name='Name')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20, verbose_name='Test Status')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Student Test',
                'verbose_name_plural': 'Student Tests',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VehicleRoadTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, default=None, null=True, verbose_name='Date')),
                ('start_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, default=None, null=True, verbose_name='End Time')),
                ('equiment_used', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Equipment')),
                ('remarks', models.TextField(blank=True, default=None, null=True, verbose_name='Remarks')),
                ('medical_card_expire_date', models.DateField(blank=True, default=None, null=True, verbose_name='Medical Card Expiration Date')),
                ('state', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='State')),
                ('type_of_power_unit', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Type of Power Unit')),
                ('trailer_length', models.CharField(blank=True, max_length=120, null=True, verbose_name='Trailer Unit')),
                ('number_of_trailers', models.IntegerField(blank=True, default=None, null=True, verbose_name='Number of Trailers')),
                ('miles', models.DecimalField(blank=True, decimal_places=2, default=None, max_digits=6, null=True, verbose_name='Miles')),
                ('driver_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/vrt/driver/', verbose_name='Driver Signature')),
                ('evaluator_signature', models.ImageField(blank=True, default=None, null=True, upload_to='signatures/vrt/evaluator/', verbose_name='Evaluator Signature')),
                ('print', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Print')),
                ('title', models.CharField(blank=True, default=None, max_length=250, null=True, verbose_name='Title')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('test', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vrt_student_test', to='safe_driver.StudentTest')),
            ],
            options={
                'verbose_name': 'Vehicle Road Test',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTUseOfTransmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starts_in_low_gear', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Starts in Low Gear')),
                ('proper_sequence', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Proper Sequence')),
                ('shifts_without_classing', models.IntegerField(default=0, verbose_name='Shifts without classing')),
                ('timing_up', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Timing Up')),
                ('timing_down', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Timing Down')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Use of Transmission',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTUseOfBrakes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('smoothly_applies', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Smoothly Applies')),
                ('stops_smoothly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Stops Smoothly')),
                ('fans_brakes', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Fans Brakes')),
                ('engine_assist_brake', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Engine Assist Brake')),
                ('foot_brake_only', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Foot Brake Only')),
                ('hv_when_stopped_traffic', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='H/V when Stopped Traffic')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Use of Brakes',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTUseClutch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disengages_completely', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Disengages Completely')),
                ('engages_smoothly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Engages Smoothly')),
                ('double_clutches_properly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Double Clutches Properly')),
                ('rides_clutch', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Rides Clutch')),
                ('coast', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Coast')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Use Clutch',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTUncoupling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('secure_equip_properly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Secure Equip Properly')),
                ('chock_wheels', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Chock Wheels')),
                ('lower_landing_gear', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Lower Landing Gear')),
                ('air_lanes_or_light_cord', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Air Lines/Light Cord')),
                ('unlock_fifth_gear', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Unlock 5th Wheel')),
                ('lower_trailer_gently', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Lower trailer Gently')),
                ('test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Verify Firm to Ground')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Uncoupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTStartEngine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('park_brake_applied', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Park Brake Applied')),
                ('transmission_in_neutral', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Transmission in Neutral')),
                ('clutch_depressed', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Clutch Depressed')),
                ('starter_used_properly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Starter Used Properly')),
                ('reads_gauges', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Reads Gauges')),
                ('seat_belt', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Seat Belt')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Start Engine',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTPreTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emergency_device', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Emergency Device')),
                ('documents', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Documents')),
                ('htr_air_dfr', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Htr/Air/Dfr')),
                ('wipers', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Wipers')),
                ('pedals', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Pedals')),
                ('gauges', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Gauges')),
                ('switches', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Switches')),
                ('steering', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Steering')),
                ('mirrors', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Mirrors')),
                ('horn', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Horn')),
                ('engine', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Engine')),
                ('fluids', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Fluids')),
                ('lights', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Lights')),
                ('reflectors', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Reflectors')),
                ('air_lines', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Air Lines')),
                ('coupling_devices', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Coupling Devices')),
                ('tires', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Tires')),
                ('wheels', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Wheels')),
                ('chassis_undercarriage', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Chassis Undercarriage')),
                ('leaks_air_fluid', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Leaks/Air/Fluid')),
                ('drain_air_tanks', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Drain Air Tanks')),
                ('park_or_emer_brake', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Park/Emer Brake')),
                ('serv_brake_test', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Serv Brake Test')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Pre Trip',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTPostTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lights', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Lights')),
                ('reflectors', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Reflectors')),
                ('body_damage', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Body Damage')),
                ('tires', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Tires')),
                ('hub_heat', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Hub Heat')),
                ('leaks', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Leaks')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Post Trip',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTParking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('does_not_hit_dock', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Doesn’t Hit Dock')),
                ('curbs_wheel', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Curbs Wheel')),
                ('chocks_wheel', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Chocks Wheel')),
                ('parking_brake_applied', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Parking Brake Applied')),
                ('transmission_neutral', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Transmission Neutral')),
                ('engine_off_pull_key', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Engine Off - Pull Key')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Parking',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTEngineOperations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lugging', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Lugging')),
                ('over_revving', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Over Revving')),
                ('check_gauges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Checks Gauges')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Engine Operations',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTDrivingHabits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trafic_signals', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Traffic Signals')),
                ('warning_signals', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Warning Signals')),
                ('use_of_horn', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Use of Horn')),
                ('steering', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Steering')),
                ('intersections', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Intersections')),
                ('use_of_lanes', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Use of Lanes')),
                ('right_of_way', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Right of Way')),
                ('following', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Following')),
                ('right_of_turns', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Right Turns')),
                ('left_turns', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Left Turns')),
                ('speed_control', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Speed Control')),
                ('use_of_mirrors', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Use of Mirrors')),
                ('passing', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Passing')),
                ('alertness', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Alertness')),
                ('area_knowledge', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Area Knowledge')),
                ('defensive_driving', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Defensive Driving')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Driving Habits',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTCoupling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_alignment', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Equipment Alignment')),
                ('air_lines_or_light_cord', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Air Lines/Light Cord')),
                ('check_for_hazards', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Check for Hazards')),
                ('back_under_slowly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Back Under Slowly')),
                ('test_tug', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Test Tug')),
                ('secures_equip_properly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Secures Equip Properly')),
                ('verfiy_couple_secure', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Verify Couple Secure')),
                ('raise_landing_gear', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Raise Landing Gear')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Coupling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='VRTBacking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checks_rear', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Checks Rear')),
                ('communicates', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Communicates')),
                ('backs_slowly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Backs Slowly')),
                ('checks_mirror', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Checks Mirror')),
                ('uses_other_aids', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Uses Other Aids')),
                ('looks_out_window', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Looks Out Window')),
                ('steers_correctly', models.IntegerField(choices=[(0, 'N/A'), (1, 'Imp'), (2, 'Ok')], default=0, verbose_name='Steers Correctly')),
                ('does_not_hit_dock', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (0, 'N/A')], default=0, verbose_name='Doesn’t Hit Dock')),
                ('notes', models.TextField(blank=True, default=None, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('vrt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.VehicleRoadTest')),
            ],
            options={
                'verbose_name': 'VRT - Backing',
                'verbose_name_plural': 'VRT - Backings',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPPushingAndPulling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keeps_work_in_front', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Keeps Work in Front')),
                ('seek_assistant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Seeks Assistant when moving heavy or awkward objects')),
                ('keep_arms_slightly_bent', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Keep arms slightly bent when working repetitive motions')),
                ('heavy_off_shaped_objects', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Heavy odd shaped objects')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Pushing and Pulling',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPPowerEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eye_contact_with_operator', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Eye Contact with Operator')),
                ('lock_out_tag_out', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Lock out-Tag Out')),
                ('using_conveyor_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Using Conveyor Equipment')),
                ('system_security', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='System Security')),
                ('equipement_pinch_points', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Equipment Pinch Points')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Power Equipment',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPKeysToAvoidingSlipsAndFalls',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('walks_with_intent', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Walks with intent (Never run)')),
                ('maintain_balance', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintain balance with firm footing')),
                ('stays_off', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stays off moving belts, rollers and chutes')),
                ('scan_work_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Scan work area, Looks where you step-step where you look')),
                ('aware_of_changing_conditions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Be aware of changing conditions, (make adjustments as needed)')),
                ('keep_walk_paths_clear_and_clean', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Keep walk paths clear and clean')),
                ('face_ladders_and_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Face ladders and equipment ascending-descending')),
                ('use_three_points_of_contact', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use three points of contact with ladders and equipment at all times')),
                ('uses_hand_rails', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses hand rails when available')),
                ('uses_designated_routes', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Uses designated routes when entering and exiting the building')),
                ('safety_chains_and_gates_used_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Are safety chains and gates being used properly')),
                ('four_feet_rule', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='4 foot rule near unsecured ledges')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Keys to avoiding slips and falls',
                'verbose_name_plural': 'SWP - Keys to avoiding slips and falls',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPKeysLiftingAndLowering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('close_to_object_shoulders', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Get close to the object-Shoulders Parallel to the ground')),
                ('position_feet', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Position Feet')),
                ('bend_your_knees', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Bend your knees')),
                ('test_weight', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Test weight')),
                ('firm_grip', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Firm Grip')),
                ('smooth_steady_lift', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Smooth Steady Lift')),
                ('pivot_feet_never_twist', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Pivot feet, never twist')),
                ('use_equipment_designed', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use equipment designed for heavy lifts')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - ',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPJobSetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shoes_slip_resistant', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shoes Slip Resistant')),
                ('shoes_good_repair', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Shoes Good Repair')),
                ('arrives_on_time', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Arrives on Time')),
                ('organizes_tools', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Organizes Tools')),
                ('avoids_distractions', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Avoids Distractions')),
                ('focus_on_assignment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Focus on Assignment')),
                ('start_with_stretching', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Start with Stretching')),
                ('stretch_after_long_delays', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stretch after Long Delays')),
                ('stay_hydrated', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Stay Hydrated')),
                ('breaks_and_lunches_adhered_to', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Breaks and Lunches Adhered to')),
                ('dress_appropriately', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dress Appropriately')),
                ('clean_work_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Clean Work Area')),
                ('no_tripping_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='No Tripping Hazards')),
                ('secure_power_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Secure Power Equipment')),
                ('maintain_daily_routine', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Maintain Daily Routine')),
                ('proper_tool_storage', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Proper Tool Storage')),
                ('report_safety_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Report Safety Hazards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Job Setup',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPExpectTheUnexpected',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_designated_walkways', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use Designated Walkways')),
                ('place_and_secure_objects', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Place and Secure Objects')),
                ('face_work_flow', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Face Work Flow')),
                ('use_caution_when_opening_doors', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use Caution When Opening Doors')),
                ('know_location_of_emergency_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Know Location of Emergency Equipment')),
                ('verify_proper_egress', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Verify Proper Egress')),
                ('look_for_Sharp_splintery_cutting_hazards', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Look for Sharp Splintery Cutting Hazards')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Expect The Unexpected',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPEndRangeMotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_shoulder_parallel', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Position shoulder parallel to the object')),
                ('use_equipment', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use equipment to minimize end range motions')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - End Range Motion',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPEmployeesInterview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('positive_attitude', models.BooleanField(default=False, verbose_name='Positive Attitude Towards Safety')),
                ('nearest_exit', models.BooleanField(default=False, verbose_name='Nearest Exit')),
                ('eye_wash', models.BooleanField(default=False, verbose_name='Eye Wash')),
                ('evacuation_plan', models.BooleanField(default=False, verbose_name='Evacuation Plan')),
                ('evacuation_assembly', models.BooleanField(default=False, verbose_name='Evacuation Assembly')),
                ('equipment_emergency_shut_offs', models.BooleanField(default=False, verbose_name='Equipment Emergency Shut Offs')),
                ('evacuation_notification', models.BooleanField(default=False, verbose_name='Evacuation Notification')),
                ('demonstrate_power_zone', models.BooleanField(default=False, verbose_name='Demonstrate Power Zone')),
                ('dehydration', models.BooleanField(default=False, verbose_name='Dehydration')),
                ('employee_understand_protocol', models.BooleanField(default=False, verbose_name='Employee Understand Protocol for Reporting Incidents Immediately')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Employees Interview',
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='SWPCuttingHazardsAndSharpObjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designate_storage_area', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Designate storage area for sharp objects')),
                ('use_tabe_guns_properly', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Use tape guns properly')),
                ('aware_of_sharp_edges', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Aware of Sharp Edges (cardboard etc.)')),
                ('wares_gloves_when_possible', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Wares gloves when possible')),
                ('keep_blade_short', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Keep the blade as short as possible')),
                ('retract_blade', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Retract blade as soon as possible')),
                ('angle_cutting_surface', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Angle cutting surface away from your body')),
                ('apply_consisten_firm_pressure', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Apply consistent firm pressure')),
                ('keep_thumbs_away', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Keep thumbs away from cutting surface')),
                ('dispose_of_used_blades', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (0, 'N/A')], default=0, verbose_name='Dispose of used blades in puncture resistant container')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('swp', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='safe_driver.SafeDriveSWP')),
            ],
            options={
                'verbose_name': 'SWP - Be aware of cutting Hazards and Sharp Objects',
                'ordering': ('-created',),
            },
        ),
    ]
